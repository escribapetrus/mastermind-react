{"version":3,"sources":["context/SecretProvider.jsx","context/GameStatusProvider.jsx","context/GuessProvider.jsx","context/MessageProvider.jsx","components/Header.jsx","components/Secret.jsx","components/PlayerHand.jsx","components/Board.jsx","components/ModalMessage.jsx","resources/pegs.js","components/GameScreen.jsx","components/Footer.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["SecretContext","createContext","SecretProvider","children","useState","pegs","display","secret","setSecret","Provider","value","useSecret","context","useContext","Error","GameStatusContext","GameStatusProvider","active","gameStatus","setGameStatus","useGameStatus","GuessContext","GuessProvider","guesses","setGuesses","useGuesses","MessageContext","MessageProvider","message","setMessage","useMessage","Header","className","style","textAlign","ButtonGroup","Button","onClick","arr","n","shuffled","_","shuffle","take","genSecret","Secret","Box","m","map","s","Icon","color","fontSize","reducer","state","action","type","guess","length","concat","payload","id","uuid","filter","el","PlayerHand","useReducer","dispatch","Container","justifyContent","minHeight","g","Grid","container","justify","alignItems","spacing","p","item","xs","sm","md","backgroundColor","width","flexDirection","guess_","x","num","secret_","zip_","zip","rights","rights_","reduce","y","sNotInGuess","difference","blacks","whites","getScore","Board","Badge","showZero","overlap","badgeContent","ModalMessage","Modal","open","onClose","BackdropComponent","Backdrop","BackdropProps","timeout","aria-labelledby","aria-describedby","margin","Paper","padding","GameScreen","useEffect","last","my","Divider","Footer","href","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.601bf42b.chunk.js","sourcesContent":["import React, {createContext, useState, useContext} from 'react';\r\n\r\nconst SecretContext = createContext();\r\n\r\nexport default function SecretProvider({children}){\r\n    let [secret, setSecret] = useState({pegs: [], display: false})\r\n    return(\r\n        <SecretContext.Provider value={{ secret, setSecret }}>\r\n            {children}\r\n        </SecretContext.Provider>\r\n    )\r\n}\r\n\r\nexport function useSecret(){\r\n    const context = useContext(SecretContext);\r\n    if(!context) throw new Error(\"useSecret must be used within a context provider\");\r\n    const {secret, setSecret} = context;\r\n    return {secret, setSecret}\r\n}\r\n","import React, {createContext, useState, useContext} from 'react'\r\n\r\nconst GameStatusContext = createContext();\r\n\r\nexport default function GameStatusProvider({children}){\r\n    let [gameStatus, setGameStatus] = useState({active: false})\r\n    return(\r\n        <GameStatusContext.Provider value={{gameStatus, setGameStatus}}>\r\n            {children}\r\n        </GameStatusContext.Provider>\r\n    )\r\n}\r\n\r\nexport function useGameStatus(){\r\n    const context = useContext(GameStatusContext);\r\n    if(!context) throw new Error(\"useContext must be used within a provider\");\r\n    const {gameStatus, setGameStatus} = context;\r\n    return {gameStatus,setGameStatus}\r\n}","import React, {createContext, useState, useContext} from 'react'\r\n\r\nconst GuessContext = createContext();\r\n\r\nexport default function GuessProvider({children}){\r\n    let [guesses, setGuesses] = useState([])\r\n    return(\r\n        <GuessContext.Provider value={{guesses,setGuesses}}>\r\n            {children}\r\n        </GuessContext.Provider>\r\n    )\r\n}\r\n\r\nexport function useGuesses(){\r\n    const context = useContext(GuessContext);\r\n    if(!context) throw new Error(\"useGuess must be used within a provider\")\r\n    const {guesses, setGuesses} = context;\r\n    return {guesses, setGuesses}\r\n}","import React, {createContext, useState, useContext} from 'react'\r\n\r\nconst MessageContext = createContext();\r\n\r\nexport default function MessageProvider({children}){\r\n    let [message, setMessage] = useState(null);\r\n    return (\r\n        <MessageContext.Provider value={{message, setMessage}}>\r\n            {children}\r\n        </MessageContext.Provider>\r\n    )\r\n}\r\n\r\nexport function useMessage(){\r\n    const context = useContext(MessageContext);\r\n    if (!context) throw new Error(\"useMessage must be used within a provider\");\r\n    const {message, setMessage} = context;\r\n    return {message, setMessage}\r\n}\r\n","import React from 'react'\r\nimport _ from 'lodash';\r\n// context providers\r\nimport { useSecret } from '../context/SecretProvider'\r\nimport { useGameStatus } from '../context/GameStatusProvider'\r\nimport { useMessage } from '../context/MessageProvider'\r\nimport { useGuesses } from '../context/GuessProvider'\r\n// components\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\n\r\nimport \"../stylesheets/Header.scss\"\r\n\r\nfunction genSecret(arr,n){\r\n    let shuffled = _.shuffle(arr)\r\n    return {pegs: _.take(shuffled,n), display: false}\r\n}\r\n\r\nfunction Header({pegs}) {\r\n    let {setSecret} = useSecret(),\r\n        {setGameStatus} = useGameStatus(),\r\n        {setGuesses} = useGuesses(),\r\n        {setMessage} = useMessage();\r\n    return (\r\n        <header className=\"Header\">\r\n            <h1 style={{textAlign:\"center\"}}>MASTERMIND REACT</h1>\r\n            <ButtonGroup>\r\n                <Button onClick={() => {\r\n                    setSecret(genSecret(pegs,4));\r\n                    setGameStatus({\r\n                        active:true\r\n                    });\r\n                    setGuesses([])\r\n                }}>New Game</Button>\r\n                <Button onClick={() => {\r\n                    setMessage(`\r\n                        Welcome to MASTERMIND. \r\n                        Discover the secret using the colored pegs and hints. \r\n                        Each black hint means a right color in the right position.\r\n                        Each white hint means a right color in the wrong position.\r\n                        Click on the colors to choose your pegs, and click on guess\r\n                        to see if you have the answer.\r\n                    `);\r\n                }}>Rules</Button>\r\n            </ButtonGroup>\r\n            \r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport {Icon, Box} from '@material-ui/core';\r\n\r\nfunction Secret({secret, display}) {\r\n    return (\r\n        <Box m={2}>\r\n            {\r\n                display ? secret.map(s => <Icon style={{color: s.color, fontSize: \"3rem\"}}>stop_circle</Icon>)\r\n                : secret.map(s => <Icon style={{color: \"black\", fontSize: \"3rem\"}}>stop_circle</Icon>)\r\n            }\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Secret\r\n","import React, {useReducer} from 'react'\r\nimport { useGuesses } from '../context/GuessProvider'\r\n\r\nimport Icon from '@material-ui/core/Icon';\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport { Grid, Container, Box } from '@material-ui/core';\r\n\r\nimport _ from 'lodash'\r\nimport { v4 as uuid } from 'uuid';\r\n\r\n// import \"../stylesheets/PlayerHand.scss\"\r\n\r\nfunction reducer(state, action){\r\n    switch (action.type){\r\n        case 'add':\r\n            if (state.guess.length <= 3){\r\n                return {guess: _.concat(state.guess, {...action.payload, id: uuid()})}};\r\n        case 'remove':\r\n            return {guess: _.filter(state.guess, el => (el.id !== action.payload.id))};\r\n        case 'reset':\r\n            return {guess: []};\r\n        default:\r\n            throw new Error();\r\n    }\r\n}\r\n//todo: create test for getScore\r\nfunction getScore(guess, secret){\r\n    if(guess.length === 4 && secret.length === 4){\r\n        let guess_ = _.map(guess, x => x.num),\r\n            secret_ = _.map(secret, x => x.num),\r\n            zip_ = _.zip(guess_,secret_),\r\n            rights = _.map(zip_, x => {\r\n                if(x[0] === x[1]){ return 1}\r\n                else { return 0} }),\r\n            rights_ = _.reduce(rights, (x,y) => x + y, 0),\r\n            sNotInGuess = _.difference(secret_,guess_),\r\n            wrongs_ = secret.length - sNotInGuess.length - rights_\r\n        return {guess: guess, blacks: rights_, whites: wrongs_}    \r\n    } else {\r\n        return {}\r\n    }\r\n}\r\n\r\n\r\nfunction PlayerHand({pegs, secret, gameStatus}) {\r\n    let [state,dispatch] = useReducer(reducer,{guess: []}),\r\n        {guesses, setGuesses} = useGuesses();\r\n\r\n    return (\r\n        <Container>\r\n            <Box\r\n                display=\"flex\"\r\n                justifyContent=\"center\"\r\n                m={2}\r\n                minHeight=\"60px\"\r\n            >\r\n            {state.guess.map(g => \r\n                <Icon \r\n                    style={{ color: g.color, fontSize: \"2.5rem\",}}\r\n                    onClick={() => dispatch({type:'remove', payload: g})}>\r\n                    stop_circle\r\n                </Icon>\r\n            )}\r\n            </Box>\r\n            <Grid \r\n                container\r\n                justify=\"center\"\r\n                alignItems=\"center\"\r\n                spacing={1}>\r\n                {pegs.map(p => \r\n                    <Grid item xs={6} sm={4} md={1}>\r\n                        <Button \r\n                            style={{ backgroundColor: p.color, color: p.color, width: \"100%\"}}\r\n                            onClick={() => dispatch({type:'add', payload: p})}>\r\n                            {p.color}\r\n                        </Button>\r\n                    </Grid>\r\n                )}\r\n            </Grid>\r\n            <Box \r\n                m={1}\r\n                display=\"flex\"\r\n                flexDirection=\"row\"\r\n                justifyContent=\"center\">\r\n                <ButtonGroup>\r\n                    <Button onClick={() => {\r\n                        if (state.guess.length === 4 && secret.length === 4 && gameStatus) {\r\n                        setGuesses(_.concat(guesses,getScore(state.guess, secret)));\r\n                        dispatch({type:'reset'})\r\n                        }}}>guess</Button>\r\n                    <Button onClick={() => dispatch({type:'reset'})}>reset</Button>\r\n                </ButtonGroup>\r\n            </Box>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default PlayerHand\r\n","import React from 'react'\r\nimport {useGuesses} from '../context/GuessProvider'\r\n\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport '../stylesheets/Board.scss'\r\n\r\nfunction Board() {\r\n    let {guesses} = useGuesses();\r\n    return (\r\n        <div className=\"Board\">\r\n            <ul>\r\n                {guesses.map(g => \r\n                <li>\r\n                    {g.guess.map(x => <Icon style={{ color: x.color, fontSize: \"2.5rem\" }}>stop_circle</Icon>)} \r\n                    <Badge color=\"secondary\" showZero overlap=\"circle\" badgeContent={g.blacks}>\r\n                        <Icon>stop_circle</Icon>\r\n                    </Badge>\r\n                    <Badge color=\"secondary\" showZero overlap=\"circle\" badgeContent={g.whites}>\r\n                        <Icon>panorama_fish_eye</Icon>\r\n                    </Badge>\r\n                </li>)}\r\n            </ul>\r\n        </div>\r\n\r\n        \r\n    )\r\n}\r\n\r\nexport default Board\r\n","import React from 'react';\r\n\r\nimport { useMessage } from '../context/MessageProvider'\r\n\r\nimport {Modal, Paper, Box, Backdrop} from '@material-ui/core';\r\n\r\nfunction ModalMessage() {\r\n  const {message, setMessage} = useMessage();\r\n  return (\r\n      <Modal\r\n        open={!!message}\r\n        onClose={() => setMessage(null)}\r\n        BackdropComponent={Backdrop}\r\n        BackdropProps={{ timeout: 700, }}\r\n        aria-labelledby=\"simple-modal-title\"\r\n        aria-describedby=\"simple-modal-description\">\r\n        <Box \r\n          width=\"70%\"\r\n          style={{margin: \"150px auto\"}}\r\n          >\r\n          <Paper style={{padding:\"20px\", textAlign: \"center\"}}>\r\n            <p>{message}</p>\r\n          </Paper>\r\n        </Box>\r\n      </Modal>\r\n  );\r\n}\r\n\r\nexport default ModalMessage","export default [\r\n    {num: 1, color: \"#1F487E\"},\r\n    {num: 2, color: \"#DF2935\"},\r\n    {num: 3, color: \"#FFD400\"},\r\n    {num: 4, color: \"#F65BE3\"},\r\n    {num: 5, color: \"#EE6123\"},\r\n    {num: 6, color: \"#0C8346\"},\r\n]","import React, {useEffect} from 'react'\r\nimport _ from 'lodash';\r\nimport { useSecret } from '../context/SecretProvider'\r\nimport { useGameStatus } from '../context/GameStatusProvider'\r\nimport { useGuesses } from '../context/GuessProvider'\r\nimport { useMessage } from '../context/MessageProvider'\r\n\r\n//components\r\nimport {Paper, Box, Divider} from '@material-ui/core';\r\nimport Header from './Header'\r\nimport Secret from \"./Secret\"\r\nimport PlayerHand from './PlayerHand'\r\nimport Board from './Board'\r\nimport ModalMessage from './ModalMessage'\r\n//resources\r\nimport pegs from '../resources/pegs'\r\n//styles\r\nimport '../stylesheets/GameScreen.scss'\r\n\r\n\r\nfunction GameScreen() {\r\n    let {secret, setSecret} = useSecret(),\r\n        {gameStatus, setGameStatus} = useGameStatus(),\r\n        {guesses} = useGuesses(),\r\n        {setMessage} = useMessage();\r\n\r\n    useEffect(() => {\r\n        if(gameStatus.active && guesses.length > 1 && _.last(guesses).blacks === 4){\r\n            setGameStatus({active: false});\r\n            setMessage(\"You win\")\r\n            // setGuesses([]);\r\n            setSecret({pegs: secret.pegs, display: true})\r\n        }\r\n        else if (gameStatus.active && guesses.length > 9){\r\n            setGameStatus({active: false});\r\n            setMessage(\"You lose!\")\r\n            // setGuesses([]);\r\n            setSecret({pegs: secret.pegs, display: true})        \r\n        }\r\n    })\r\n    return (\r\n        <Paper>\r\n            <Box \r\n                my={4}\r\n                p={1} \r\n                display=\"flex\"\r\n                flexDirection=\"column\" \r\n                justifyContent=\"center\" \r\n                alignItems=\"center\">\r\n                <Header pegs={pegs}/>\r\n                {(secret.pegs.length > 1) && <Secret secret={secret.pegs} display={secret.display}/>}\r\n                <Divider/>\r\n                <ModalMessage/>\r\n                <Board/>\r\n                <Divider/>\r\n                <PlayerHand \r\n                    pegs={pegs} \r\n                    secret={secret.pegs}\r\n                    gameStatus={gameStatus.active}/>\r\n            </Box>\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default GameScreen\r\n","import React from 'react'\r\n\r\nfunction Footer() {\r\n    return (\r\n        <div style={{textAlign:\"center\", backgroundColor: \"#dddddd\"}}>\r\n            <p>\r\n                created by <a href=\"https://github.com/escribapetrus\">escribapetrus</a> using react. 🧙\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","import React from 'react';\n//context providers\nimport SecretProvider from '../context/SecretProvider';\nimport GameStatusProvider from '../context/GameStatusProvider';\nimport GuessProvider from '../context/GuessProvider';\nimport MessageProvider from '../context/MessageProvider';\n//components\nimport GameScreen from \"./GameScreen\";\nimport {Container,Box} from '@material-ui/core';\nimport Footer from './Footer'\n\n//styles\nimport '../stylesheets/App.scss';\n\nfunction App() {\n  return (\n    <Box minHeight=\"100vh\" display=\"flex\" flexDirection=\"column\" justifyContent=\"space-between\">\n    <Container>\n      <GameStatusProvider>\n        <SecretProvider>\n          <GuessProvider>\n            <MessageProvider>\n              <GameScreen/>\n            </MessageProvider>\n          </GuessProvider>\n        </SecretProvider>\n      </GameStatusProvider>\n    </Container>\n    <Footer/>\n    </Box>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './stylesheets/_index.css';\nimport App from './components/App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}